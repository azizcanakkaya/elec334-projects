
blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f50  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  0800100c  0800100c  0001100c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001048  08001048  00011048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800104c  0800104c  0001104c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000088  20000000  08001050  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000003c  20000088  080010d8  00020088  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200000c4  080010d8  000200c4  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  9 .debug_info   00001ec5  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000056e  00000000  00000000  00021f75  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000140  00000000  00000000  000224e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00022628  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000d24  00000000  00000000  00022730  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000d6e  00000000  00000000  00023454  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007b  00000000  00000000  000241c2  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000398  00000000  00000000  00024240  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000088 	.word	0x20000088
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000ff4 	.word	0x08000ff4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000008c 	.word	0x2000008c
 8000100:	08000ff4 	.word	0x08000ff4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <BSP_System_Init>:
te_track_stat plb_stat;



//configuration of pins
void BSP_System_Init(void){
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	RCC->IOPENR |= (3U << 0);
 8000330:	4bcb      	ldr	r3, [pc, #812]	; (8000660 <BSP_System_Init+0x334>)
 8000332:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000334:	4bca      	ldr	r3, [pc, #808]	; (8000660 <BSP_System_Init+0x334>)
 8000336:	2103      	movs	r1, #3
 8000338:	430a      	orrs	r2, r1
 800033a:	635a      	str	r2, [r3, #52]	; 0x34

	GPIOB->MODER &= ~(uint32_t)(0xFFFF);
 800033c:	4bc9      	ldr	r3, [pc, #804]	; (8000664 <BSP_System_Init+0x338>)
 800033e:	681a      	ldr	r2, [r3, #0]
 8000340:	4bc8      	ldr	r3, [pc, #800]	; (8000664 <BSP_System_Init+0x338>)
 8000342:	0c12      	lsrs	r2, r2, #16
 8000344:	0412      	lsls	r2, r2, #16
 8000346:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= ((uint32_t)0xD555);
 8000348:	4bc6      	ldr	r3, [pc, #792]	; (8000664 <BSP_System_Init+0x338>)
 800034a:	681a      	ldr	r2, [r3, #0]
 800034c:	4bc5      	ldr	r3, [pc, #788]	; (8000664 <BSP_System_Init+0x338>)
 800034e:	49c6      	ldr	r1, [pc, #792]	; (8000668 <BSP_System_Init+0x33c>)
 8000350:	430a      	orrs	r2, r1
 8000352:	601a      	str	r2, [r3, #0]

	GPIOA->MODER &= ~(uint32_t)(0x3FCFF0F);
 8000354:	23a0      	movs	r3, #160	; 0xa0
 8000356:	05db      	lsls	r3, r3, #23
 8000358:	681a      	ldr	r2, [r3, #0]
 800035a:	23a0      	movs	r3, #160	; 0xa0
 800035c:	05db      	lsls	r3, r3, #23
 800035e:	49c3      	ldr	r1, [pc, #780]	; (800066c <BSP_System_Init+0x340>)
 8000360:	400a      	ands	r2, r1
 8000362:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (uint32_t)(0x0035505);
 8000364:	23a0      	movs	r3, #160	; 0xa0
 8000366:	05db      	lsls	r3, r3, #23
 8000368:	681a      	ldr	r2, [r3, #0]
 800036a:	23a0      	movs	r3, #160	; 0xa0
 800036c:	05db      	lsls	r3, r3, #23
 800036e:	49c0      	ldr	r1, [pc, #768]	; (8000670 <BSP_System_Init+0x344>)
 8000370:	430a      	orrs	r2, r1
 8000372:	601a      	str	r2, [r3, #0]

	clear();
 8000374:	f000 fdba 	bl	8000eec <clear>

	GPIOA->PUPDR |= (2U << 9*2);
 8000378:	23a0      	movs	r3, #160	; 0xa0
 800037a:	05db      	lsls	r3, r3, #23
 800037c:	68da      	ldr	r2, [r3, #12]
 800037e:	23a0      	movs	r3, #160	; 0xa0
 8000380:	05db      	lsls	r3, r3, #23
 8000382:	2180      	movs	r1, #128	; 0x80
 8000384:	0309      	lsls	r1, r1, #12
 8000386:	430a      	orrs	r2, r1
 8000388:	60da      	str	r2, [r3, #12]
	GPIOA->PUPDR |= (2U << 10*2);
 800038a:	23a0      	movs	r3, #160	; 0xa0
 800038c:	05db      	lsls	r3, r3, #23
 800038e:	68da      	ldr	r2, [r3, #12]
 8000390:	23a0      	movs	r3, #160	; 0xa0
 8000392:	05db      	lsls	r3, r3, #23
 8000394:	2180      	movs	r1, #128	; 0x80
 8000396:	0389      	lsls	r1, r1, #14
 8000398:	430a      	orrs	r2, r1
 800039a:	60da      	str	r2, [r3, #12]
	GPIOA->PUPDR |= (2U << 11*2);
 800039c:	23a0      	movs	r3, #160	; 0xa0
 800039e:	05db      	lsls	r3, r3, #23
 80003a0:	68da      	ldr	r2, [r3, #12]
 80003a2:	23a0      	movs	r3, #160	; 0xa0
 80003a4:	05db      	lsls	r3, r3, #23
 80003a6:	2180      	movs	r1, #128	; 0x80
 80003a8:	0409      	lsls	r1, r1, #16
 80003aa:	430a      	orrs	r2, r1
 80003ac:	60da      	str	r2, [r3, #12]
	GPIOA->PUPDR |= (2U << 12*2);
 80003ae:	23a0      	movs	r3, #160	; 0xa0
 80003b0:	05db      	lsls	r3, r3, #23
 80003b2:	68da      	ldr	r2, [r3, #12]
 80003b4:	23a0      	movs	r3, #160	; 0xa0
 80003b6:	05db      	lsls	r3, r3, #23
 80003b8:	2180      	movs	r1, #128	; 0x80
 80003ba:	0489      	lsls	r1, r1, #18
 80003bc:	430a      	orrs	r2, r1
 80003be:	60da      	str	r2, [r3, #12]

	EXTI->EXTICR[1] |= (0U << 9);
 80003c0:	4aac      	ldr	r2, [pc, #688]	; (8000674 <BSP_System_Init+0x348>)
 80003c2:	4bac      	ldr	r3, [pc, #688]	; (8000674 <BSP_System_Init+0x348>)
 80003c4:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80003c6:	665a      	str	r2, [r3, #100]	; 0x64

	EXTI->RTSR1 |= (15U << 9);
 80003c8:	4baa      	ldr	r3, [pc, #680]	; (8000674 <BSP_System_Init+0x348>)
 80003ca:	681a      	ldr	r2, [r3, #0]
 80003cc:	4ba9      	ldr	r3, [pc, #676]	; (8000674 <BSP_System_Init+0x348>)
 80003ce:	21f0      	movs	r1, #240	; 0xf0
 80003d0:	0149      	lsls	r1, r1, #5
 80003d2:	430a      	orrs	r2, r1
 80003d4:	601a      	str	r2, [r3, #0]

	EXTI->IMR1 |= (15U << 9);
 80003d6:	4aa7      	ldr	r2, [pc, #668]	; (8000674 <BSP_System_Init+0x348>)
 80003d8:	2380      	movs	r3, #128	; 0x80
 80003da:	58d3      	ldr	r3, [r2, r3]
 80003dc:	49a5      	ldr	r1, [pc, #660]	; (8000674 <BSP_System_Init+0x348>)
 80003de:	22f0      	movs	r2, #240	; 0xf0
 80003e0:	0152      	lsls	r2, r2, #5
 80003e2:	4313      	orrs	r3, r2
 80003e4:	2280      	movs	r2, #128	; 0x80
 80003e6:	508b      	str	r3, [r1, r2]

	NVIC_SetPriority( EXTI4_15_IRQn  , 0);
 80003e8:	2100      	movs	r1, #0
 80003ea:	2007      	movs	r0, #7
 80003ec:	f7ff ff30 	bl	8000250 <__NVIC_SetPriority>
	NVIC_EnableIRQ( EXTI4_15_IRQn );
 80003f0:	2007      	movs	r0, #7
 80003f2:	f7ff ff13 	bl	800021c <__NVIC_EnableIRQ>

	GPIOA->ODR |= (3U << 6);
 80003f6:	23a0      	movs	r3, #160	; 0xa0
 80003f8:	05db      	lsls	r3, r3, #23
 80003fa:	695a      	ldr	r2, [r3, #20]
 80003fc:	23a0      	movs	r3, #160	; 0xa0
 80003fe:	05db      	lsls	r3, r3, #23
 8000400:	21c0      	movs	r1, #192	; 0xc0
 8000402:	430a      	orrs	r2, r1
 8000404:	615a      	str	r2, [r3, #20]

	//adc clock
	RCC->APBENR2 |= (1U << 20);
 8000406:	4b96      	ldr	r3, [pc, #600]	; (8000660 <BSP_System_Init+0x334>)
 8000408:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800040a:	4b95      	ldr	r3, [pc, #596]	; (8000660 <BSP_System_Init+0x334>)
 800040c:	2180      	movs	r1, #128	; 0x80
 800040e:	0349      	lsls	r1, r1, #13
 8000410:	430a      	orrs	r2, r1
 8000412:	641a      	str	r2, [r3, #64]	; 0x40
	//voltage regulator
	ADC1->CR |= (1U << 28);
 8000414:	4b98      	ldr	r3, [pc, #608]	; (8000678 <BSP_System_Init+0x34c>)
 8000416:	689a      	ldr	r2, [r3, #8]
 8000418:	4b97      	ldr	r3, [pc, #604]	; (8000678 <BSP_System_Init+0x34c>)
 800041a:	2180      	movs	r1, #128	; 0x80
 800041c:	0549      	lsls	r1, r1, #21
 800041e:	430a      	orrs	r2, r1
 8000420:	609a      	str	r2, [r3, #8]

	delay(1000);
 8000422:	23fa      	movs	r3, #250	; 0xfa
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	0018      	movs	r0, r3
 8000428:	f000 fd74 	bl	8000f14 <delay>
	//calibration
	ADC1->CR |= (1U << 31);
 800042c:	4b92      	ldr	r3, [pc, #584]	; (8000678 <BSP_System_Init+0x34c>)
 800042e:	689a      	ldr	r2, [r3, #8]
 8000430:	4b91      	ldr	r3, [pc, #580]	; (8000678 <BSP_System_Init+0x34c>)
 8000432:	2180      	movs	r1, #128	; 0x80
 8000434:	0609      	lsls	r1, r1, #24
 8000436:	430a      	orrs	r2, r1
 8000438:	609a      	str	r2, [r3, #8]

	for(;;){
		if( !((ADC1->CR >> 31)) )
 800043a:	4b8f      	ldr	r3, [pc, #572]	; (8000678 <BSP_System_Init+0x34c>)
 800043c:	689b      	ldr	r3, [r3, #8]
 800043e:	2b00      	cmp	r3, #0
 8000440:	da00      	bge.n	8000444 <BSP_System_Init+0x118>
 8000442:	e7fa      	b.n	800043a <BSP_System_Init+0x10e>
			break;
 8000444:	46c0      	nop			; (mov r8, r8)
	}

	//8 bit res
	ADC1->CFGR1 |= (1U << 4);
 8000446:	4b8c      	ldr	r3, [pc, #560]	; (8000678 <BSP_System_Init+0x34c>)
 8000448:	68da      	ldr	r2, [r3, #12]
 800044a:	4b8b      	ldr	r3, [pc, #556]	; (8000678 <BSP_System_Init+0x34c>)
 800044c:	2110      	movs	r1, #16
 800044e:	430a      	orrs	r2, r1
 8000450:	60da      	str	r2, [r3, #12]
	//channel sel
	ADC1->CHSELR |= (1U << 11);
 8000452:	4b89      	ldr	r3, [pc, #548]	; (8000678 <BSP_System_Init+0x34c>)
 8000454:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000456:	4b88      	ldr	r3, [pc, #544]	; (8000678 <BSP_System_Init+0x34c>)
 8000458:	2180      	movs	r1, #128	; 0x80
 800045a:	0109      	lsls	r1, r1, #4
 800045c:	430a      	orrs	r2, r1
 800045e:	629a      	str	r2, [r3, #40]	; 0x28
	ADC1->ISR |= (1U << 11);
 8000460:	4b85      	ldr	r3, [pc, #532]	; (8000678 <BSP_System_Init+0x34c>)
 8000462:	681a      	ldr	r2, [r3, #0]
 8000464:	4b84      	ldr	r3, [pc, #528]	; (8000678 <BSP_System_Init+0x34c>)
 8000466:	2180      	movs	r1, #128	; 0x80
 8000468:	0109      	lsls	r1, r1, #4
 800046a:	430a      	orrs	r2, r1
 800046c:	601a      	str	r2, [r3, #0]
	ADC1->CFGR1 |= (1U << 13);
 800046e:	4b82      	ldr	r3, [pc, #520]	; (8000678 <BSP_System_Init+0x34c>)
 8000470:	68da      	ldr	r2, [r3, #12]
 8000472:	4b81      	ldr	r3, [pc, #516]	; (8000678 <BSP_System_Init+0x34c>)
 8000474:	2180      	movs	r1, #128	; 0x80
 8000476:	0189      	lsls	r1, r1, #6
 8000478:	430a      	orrs	r2, r1
 800047a:	60da      	str	r2, [r3, #12]

	ADC1->SMPR |= (0U << 0);
 800047c:	4a7e      	ldr	r2, [pc, #504]	; (8000678 <BSP_System_Init+0x34c>)
 800047e:	4b7e      	ldr	r3, [pc, #504]	; (8000678 <BSP_System_Init+0x34c>)
 8000480:	6952      	ldr	r2, [r2, #20]
 8000482:	615a      	str	r2, [r3, #20]
	ADC1->SMPR |= (0U << 1);
 8000484:	4a7c      	ldr	r2, [pc, #496]	; (8000678 <BSP_System_Init+0x34c>)
 8000486:	4b7c      	ldr	r3, [pc, #496]	; (8000678 <BSP_System_Init+0x34c>)
 8000488:	6952      	ldr	r2, [r2, #20]
 800048a:	615a      	str	r2, [r3, #20]
	ADC1->SMPR |= (0U << 2);
 800048c:	4a7a      	ldr	r2, [pc, #488]	; (8000678 <BSP_System_Init+0x34c>)
 800048e:	4b7a      	ldr	r3, [pc, #488]	; (8000678 <BSP_System_Init+0x34c>)
 8000490:	6952      	ldr	r2, [r2, #20]
 8000492:	615a      	str	r2, [r3, #20]

	ADC1->CR |= (1U << 0);
 8000494:	4b78      	ldr	r3, [pc, #480]	; (8000678 <BSP_System_Init+0x34c>)
 8000496:	689a      	ldr	r2, [r3, #8]
 8000498:	4b77      	ldr	r3, [pc, #476]	; (8000678 <BSP_System_Init+0x34c>)
 800049a:	2101      	movs	r1, #1
 800049c:	430a      	orrs	r2, r1
 800049e:	609a      	str	r2, [r3, #8]
	//START CONVERSION
	//ADC1->CR |= (1U << 2);

	//I2C

	GPIOB->MODER &= ~(uint32_t)(0xF0000);
 80004a0:	4b70      	ldr	r3, [pc, #448]	; (8000664 <BSP_System_Init+0x338>)
 80004a2:	681a      	ldr	r2, [r3, #0]
 80004a4:	4b6f      	ldr	r3, [pc, #444]	; (8000664 <BSP_System_Init+0x338>)
 80004a6:	4975      	ldr	r1, [pc, #468]	; (800067c <BSP_System_Init+0x350>)
 80004a8:	400a      	ands	r2, r1
 80004aa:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (0xA0000);
 80004ac:	4b6d      	ldr	r3, [pc, #436]	; (8000664 <BSP_System_Init+0x338>)
 80004ae:	681a      	ldr	r2, [r3, #0]
 80004b0:	4b6c      	ldr	r3, [pc, #432]	; (8000664 <BSP_System_Init+0x338>)
 80004b2:	21a0      	movs	r1, #160	; 0xa0
 80004b4:	0309      	lsls	r1, r1, #12
 80004b6:	430a      	orrs	r2, r1
 80004b8:	601a      	str	r2, [r3, #0]


	//drain
	GPIOB->OTYPER |= (2U << 8);
 80004ba:	4b6a      	ldr	r3, [pc, #424]	; (8000664 <BSP_System_Init+0x338>)
 80004bc:	685a      	ldr	r2, [r3, #4]
 80004be:	4b69      	ldr	r3, [pc, #420]	; (8000664 <BSP_System_Init+0x338>)
 80004c0:	2180      	movs	r1, #128	; 0x80
 80004c2:	0089      	lsls	r1, r1, #2
 80004c4:	430a      	orrs	r2, r1
 80004c6:	605a      	str	r2, [r3, #4]

	//PB8
	GPIOB->AFR[1] &= ~(0xF << 0 );
 80004c8:	4b66      	ldr	r3, [pc, #408]	; (8000664 <BSP_System_Init+0x338>)
 80004ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004cc:	4b65      	ldr	r3, [pc, #404]	; (8000664 <BSP_System_Init+0x338>)
 80004ce:	210f      	movs	r1, #15
 80004d0:	438a      	bics	r2, r1
 80004d2:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOB->AFR[1] |= (6U << 0 );
 80004d4:	4b63      	ldr	r3, [pc, #396]	; (8000664 <BSP_System_Init+0x338>)
 80004d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004d8:	4b62      	ldr	r3, [pc, #392]	; (8000664 <BSP_System_Init+0x338>)
 80004da:	2106      	movs	r1, #6
 80004dc:	430a      	orrs	r2, r1
 80004de:	625a      	str	r2, [r3, #36]	; 0x24
	//PB9
	GPIOB->AFR[1] &= ~(0xF << 4 );
 80004e0:	4b60      	ldr	r3, [pc, #384]	; (8000664 <BSP_System_Init+0x338>)
 80004e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004e4:	4b5f      	ldr	r3, [pc, #380]	; (8000664 <BSP_System_Init+0x338>)
 80004e6:	21f0      	movs	r1, #240	; 0xf0
 80004e8:	438a      	bics	r2, r1
 80004ea:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOB->AFR[1] |= (6U << 4 );
 80004ec:	4b5d      	ldr	r3, [pc, #372]	; (8000664 <BSP_System_Init+0x338>)
 80004ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004f0:	4b5c      	ldr	r3, [pc, #368]	; (8000664 <BSP_System_Init+0x338>)
 80004f2:	2160      	movs	r1, #96	; 0x60
 80004f4:	430a      	orrs	r2, r1
 80004f6:	625a      	str	r2, [r3, #36]	; 0x24

	//ENABLE I2C
	RCC->APBRSTR1 |= (1U << 21);
 80004f8:	4b59      	ldr	r3, [pc, #356]	; (8000660 <BSP_System_Init+0x334>)
 80004fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004fc:	4b58      	ldr	r3, [pc, #352]	; (8000660 <BSP_System_Init+0x334>)
 80004fe:	2180      	movs	r1, #128	; 0x80
 8000500:	0389      	lsls	r1, r1, #14
 8000502:	430a      	orrs	r2, r1
 8000504:	62da      	str	r2, [r3, #44]	; 0x2c

	//ERRI
	I2C1->CR1 |= (1U << 7);
 8000506:	4b5e      	ldr	r3, [pc, #376]	; (8000680 <BSP_System_Init+0x354>)
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	4b5d      	ldr	r3, [pc, #372]	; (8000680 <BSP_System_Init+0x354>)
 800050c:	2180      	movs	r1, #128	; 0x80
 800050e:	430a      	orrs	r2, r1
 8000510:	601a      	str	r2, [r3, #0]
	//NACK
	I2C1->CR1 |= (1U << 15);
 8000512:	4b5b      	ldr	r3, [pc, #364]	; (8000680 <BSP_System_Init+0x354>)
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	4b5a      	ldr	r3, [pc, #360]	; (8000680 <BSP_System_Init+0x354>)
 8000518:	2180      	movs	r1, #128	; 0x80
 800051a:	0209      	lsls	r1, r1, #8
 800051c:	430a      	orrs	r2, r1
 800051e:	601a      	str	r2, [r3, #0]
	//ATUOEND
	I2C1->CR1 |= (1U << 25);
 8000520:	4b57      	ldr	r3, [pc, #348]	; (8000680 <BSP_System_Init+0x354>)
 8000522:	681a      	ldr	r2, [r3, #0]
 8000524:	4b56      	ldr	r3, [pc, #344]	; (8000680 <BSP_System_Init+0x354>)
 8000526:	2180      	movs	r1, #128	; 0x80
 8000528:	0489      	lsls	r1, r1, #18
 800052a:	430a      	orrs	r2, r1
 800052c:	601a      	str	r2, [r3, #0]
	//PRESC
	I2C1->TIMINGR |= (3 << 28);
 800052e:	4b54      	ldr	r3, [pc, #336]	; (8000680 <BSP_System_Init+0x354>)
 8000530:	691a      	ldr	r2, [r3, #16]
 8000532:	4b53      	ldr	r3, [pc, #332]	; (8000680 <BSP_System_Init+0x354>)
 8000534:	21c0      	movs	r1, #192	; 0xc0
 8000536:	0589      	lsls	r1, r1, #22
 8000538:	430a      	orrs	r2, r1
 800053a:	611a      	str	r2, [r3, #16]
	//SCLL
	I2C1->TIMINGR |= (0x13 << 0);
 800053c:	4b50      	ldr	r3, [pc, #320]	; (8000680 <BSP_System_Init+0x354>)
 800053e:	691a      	ldr	r2, [r3, #16]
 8000540:	4b4f      	ldr	r3, [pc, #316]	; (8000680 <BSP_System_Init+0x354>)
 8000542:	2113      	movs	r1, #19
 8000544:	430a      	orrs	r2, r1
 8000546:	611a      	str	r2, [r3, #16]
	//SCLH
	I2C1->TIMINGR |= (0xF << 8);
 8000548:	4b4d      	ldr	r3, [pc, #308]	; (8000680 <BSP_System_Init+0x354>)
 800054a:	691a      	ldr	r2, [r3, #16]
 800054c:	4b4c      	ldr	r3, [pc, #304]	; (8000680 <BSP_System_Init+0x354>)
 800054e:	21f0      	movs	r1, #240	; 0xf0
 8000550:	0109      	lsls	r1, r1, #4
 8000552:	430a      	orrs	r2, r1
 8000554:	611a      	str	r2, [r3, #16]
	//SDADEL
	I2C1->TIMINGR |= (0x2 << 16);
 8000556:	4b4a      	ldr	r3, [pc, #296]	; (8000680 <BSP_System_Init+0x354>)
 8000558:	691a      	ldr	r2, [r3, #16]
 800055a:	4b49      	ldr	r3, [pc, #292]	; (8000680 <BSP_System_Init+0x354>)
 800055c:	2180      	movs	r1, #128	; 0x80
 800055e:	0289      	lsls	r1, r1, #10
 8000560:	430a      	orrs	r2, r1
 8000562:	611a      	str	r2, [r3, #16]
	//SCLDEL
	I2C1->TIMINGR |= (0x4 << 20);
 8000564:	4b46      	ldr	r3, [pc, #280]	; (8000680 <BSP_System_Init+0x354>)
 8000566:	691a      	ldr	r2, [r3, #16]
 8000568:	4b45      	ldr	r3, [pc, #276]	; (8000680 <BSP_System_Init+0x354>)
 800056a:	2180      	movs	r1, #128	; 0x80
 800056c:	03c9      	lsls	r1, r1, #15
 800056e:	430a      	orrs	r2, r1
 8000570:	611a      	str	r2, [r3, #16]

	//PE
	I2C1->CR1 |= (1U << 0);
 8000572:	4b43      	ldr	r3, [pc, #268]	; (8000680 <BSP_System_Init+0x354>)
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	4b42      	ldr	r3, [pc, #264]	; (8000680 <BSP_System_Init+0x354>)
 8000578:	2101      	movs	r1, #1
 800057a:	430a      	orrs	r2, r1
 800057c:	601a      	str	r2, [r3, #0]

	NVIC_SetPriority( I2C1_IRQn  , 0);
 800057e:	2100      	movs	r1, #0
 8000580:	2017      	movs	r0, #23
 8000582:	f7ff fe65 	bl	8000250 <__NVIC_SetPriority>
	NVIC_EnableIRQ( I2C1_IRQn );
 8000586:	2017      	movs	r0, #23
 8000588:	f7ff fe48 	bl	800021c <__NVIC_EnableIRQ>

	//TIM 16 SET-UP
	//PB0 as AF mode
	GPIOA->MODER &= ~(3U << 2*8);
 800058c:	23a0      	movs	r3, #160	; 0xa0
 800058e:	05db      	lsls	r3, r3, #23
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	23a0      	movs	r3, #160	; 0xa0
 8000594:	05db      	lsls	r3, r3, #23
 8000596:	493b      	ldr	r1, [pc, #236]	; (8000684 <BSP_System_Init+0x358>)
 8000598:	400a      	ands	r2, r1
 800059a:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (2U << 2*8);
 800059c:	23a0      	movs	r3, #160	; 0xa0
 800059e:	05db      	lsls	r3, r3, #23
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	23a0      	movs	r3, #160	; 0xa0
 80005a4:	05db      	lsls	r3, r3, #23
 80005a6:	2180      	movs	r1, #128	; 0x80
 80005a8:	0289      	lsls	r1, r1, #10
 80005aa:	430a      	orrs	r2, r1
 80005ac:	601a      	str	r2, [r3, #0]

	GPIOA->AFR[1] &= ~((uint32_t)0xF << 4);
 80005ae:	23a0      	movs	r3, #160	; 0xa0
 80005b0:	05db      	lsls	r3, r3, #23
 80005b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005b4:	23a0      	movs	r3, #160	; 0xa0
 80005b6:	05db      	lsls	r3, r3, #23
 80005b8:	21f0      	movs	r1, #240	; 0xf0
 80005ba:	438a      	bics	r2, r1
 80005bc:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOA->AFR[1] |= (2U << 4);
 80005be:	23a0      	movs	r3, #160	; 0xa0
 80005c0:	05db      	lsls	r3, r3, #23
 80005c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005c4:	23a0      	movs	r3, #160	; 0xa0
 80005c6:	05db      	lsls	r3, r3, #23
 80005c8:	2120      	movs	r1, #32
 80005ca:	430a      	orrs	r2, r1
 80005cc:	625a      	str	r2, [r3, #36]	; 0x24

	RCC->APBENR2 |= (1U << 11); // enable TIM1 clock
 80005ce:	4b24      	ldr	r3, [pc, #144]	; (8000660 <BSP_System_Init+0x334>)
 80005d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005d2:	4b23      	ldr	r3, [pc, #140]	; (8000660 <BSP_System_Init+0x334>)
 80005d4:	2180      	movs	r1, #128	; 0x80
 80005d6:	0109      	lsls	r1, r1, #4
 80005d8:	430a      	orrs	r2, r1
 80005da:	641a      	str	r2, [r3, #64]	; 0x40

	TIM1->CR1 = 0U; // resetting control register
 80005dc:	4b2a      	ldr	r3, [pc, #168]	; (8000688 <BSP_System_Init+0x35c>)
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
	TIM1->CR1 |= (1U << 7); // ARPE buffering
 80005e2:	4b29      	ldr	r3, [pc, #164]	; (8000688 <BSP_System_Init+0x35c>)
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	4b28      	ldr	r3, [pc, #160]	; (8000688 <BSP_System_Init+0x35c>)
 80005e8:	2180      	movs	r1, #128	; 0x80
 80005ea:	430a      	orrs	r2, r1
 80005ec:	601a      	str	r2, [r3, #0]
	TIM1->CNT = 0U; // timer counter reset
 80005ee:	4b26      	ldr	r3, [pc, #152]	; (8000688 <BSP_System_Init+0x35c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	625a      	str	r2, [r3, #36]	; 0x24

	TIM1->PSC = ((SystemCoreClock/10000) - 1); // setting prescaler to 1600-1
 80005f4:	4b25      	ldr	r3, [pc, #148]	; (800068c <BSP_System_Init+0x360>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4925      	ldr	r1, [pc, #148]	; (8000690 <BSP_System_Init+0x364>)
 80005fa:	0018      	movs	r0, r3
 80005fc:	f7ff fd82 	bl	8000104 <__udivsi3>
 8000600:	0003      	movs	r3, r0
 8000602:	001a      	movs	r2, r3
 8000604:	4b20      	ldr	r3, [pc, #128]	; (8000688 <BSP_System_Init+0x35c>)
 8000606:	3a01      	subs	r2, #1
 8000608:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR = 1U; // set the autoreload register to 1 milliseconds
 800060a:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <BSP_System_Init+0x35c>)
 800060c:	2201      	movs	r2, #1
 800060e:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM1->CR1 |= (1U << 0); // enable TIM1
 8000610:	4b1d      	ldr	r3, [pc, #116]	; (8000688 <BSP_System_Init+0x35c>)
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	4b1c      	ldr	r3, [pc, #112]	; (8000688 <BSP_System_Init+0x35c>)
 8000616:	2101      	movs	r1, #1
 8000618:	430a      	orrs	r2, r1
 800061a:	601a      	str	r2, [r3, #0]

	TIM1->CCMR1 |= (6U << 4);
 800061c:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <BSP_System_Init+0x35c>)
 800061e:	699a      	ldr	r2, [r3, #24]
 8000620:	4b19      	ldr	r3, [pc, #100]	; (8000688 <BSP_System_Init+0x35c>)
 8000622:	2160      	movs	r1, #96	; 0x60
 8000624:	430a      	orrs	r2, r1
 8000626:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 |= (1U << 3);
 8000628:	4b17      	ldr	r3, [pc, #92]	; (8000688 <BSP_System_Init+0x35c>)
 800062a:	699a      	ldr	r2, [r3, #24]
 800062c:	4b16      	ldr	r3, [pc, #88]	; (8000688 <BSP_System_Init+0x35c>)
 800062e:	2108      	movs	r1, #8
 8000630:	430a      	orrs	r2, r1
 8000632:	619a      	str	r2, [r3, #24]
	TIM1->CCER |= (1U << 0);
 8000634:	4b14      	ldr	r3, [pc, #80]	; (8000688 <BSP_System_Init+0x35c>)
 8000636:	6a1a      	ldr	r2, [r3, #32]
 8000638:	4b13      	ldr	r3, [pc, #76]	; (8000688 <BSP_System_Init+0x35c>)
 800063a:	2101      	movs	r1, #1
 800063c:	430a      	orrs	r2, r1
 800063e:	621a      	str	r2, [r3, #32]
	TIM1->CCR1 |= (1U << 0);
 8000640:	4b11      	ldr	r3, [pc, #68]	; (8000688 <BSP_System_Init+0x35c>)
 8000642:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000644:	4b10      	ldr	r3, [pc, #64]	; (8000688 <BSP_System_Init+0x35c>)
 8000646:	2101      	movs	r1, #1
 8000648:	430a      	orrs	r2, r1
 800064a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->BDTR |= (1U << 15);
 800064c:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <BSP_System_Init+0x35c>)
 800064e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000650:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <BSP_System_Init+0x35c>)
 8000652:	2180      	movs	r1, #128	; 0x80
 8000654:	0209      	lsls	r1, r1, #8
 8000656:	430a      	orrs	r2, r1
 8000658:	645a      	str	r2, [r3, #68]	; 0x44

}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40021000 	.word	0x40021000
 8000664:	50000400 	.word	0x50000400
 8000668:	0000d555 	.word	0x0000d555
 800066c:	fc0300f0 	.word	0xfc0300f0
 8000670:	00035505 	.word	0x00035505
 8000674:	40021800 	.word	0x40021800
 8000678:	40012400 	.word	0x40012400
 800067c:	fff0ffff 	.word	0xfff0ffff
 8000680:	40005400 	.word	0x40005400
 8000684:	fffcffff 	.word	0xfffcffff
 8000688:	40012c00 	.word	0x40012c00
 800068c:	20000084 	.word	0x20000084
 8000690:	00002710 	.word	0x00002710

08000694 <display_start>:


void display_start(void){
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	clear();
 8000698:	f000 fc28 	bl	8000eec <clear>
	GPIOB->ODR |= numb[1];
 800069c:	4b2f      	ldr	r3, [pc, #188]	; (800075c <display_start+0xc8>)
 800069e:	6959      	ldr	r1, [r3, #20]
 80006a0:	4b2f      	ldr	r3, [pc, #188]	; (8000760 <display_start+0xcc>)
 80006a2:	685a      	ldr	r2, [r3, #4]
 80006a4:	4b2d      	ldr	r3, [pc, #180]	; (800075c <display_start+0xc8>)
 80006a6:	430a      	orrs	r2, r1
 80006a8:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= digit[0];
 80006aa:	23a0      	movs	r3, #160	; 0xa0
 80006ac:	05db      	lsls	r3, r3, #23
 80006ae:	6959      	ldr	r1, [r3, #20]
 80006b0:	4b2c      	ldr	r3, [pc, #176]	; (8000764 <display_start+0xd0>)
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	23a0      	movs	r3, #160	; 0xa0
 80006b6:	05db      	lsls	r3, r3, #23
 80006b8:	430a      	orrs	r2, r1
 80006ba:	615a      	str	r2, [r3, #20]
	delay(LEDDELAY);
 80006bc:	23fa      	movs	r3, #250	; 0xfa
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	0018      	movs	r0, r3
 80006c2:	f000 fc27 	bl	8000f14 <delay>

	clear();
 80006c6:	f000 fc11 	bl	8000eec <clear>
	GPIOB->ODR |= numb[7];
 80006ca:	4b24      	ldr	r3, [pc, #144]	; (800075c <display_start+0xc8>)
 80006cc:	6959      	ldr	r1, [r3, #20]
 80006ce:	4b24      	ldr	r3, [pc, #144]	; (8000760 <display_start+0xcc>)
 80006d0:	69da      	ldr	r2, [r3, #28]
 80006d2:	4b22      	ldr	r3, [pc, #136]	; (800075c <display_start+0xc8>)
 80006d4:	430a      	orrs	r2, r1
 80006d6:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= digit[1];
 80006d8:	23a0      	movs	r3, #160	; 0xa0
 80006da:	05db      	lsls	r3, r3, #23
 80006dc:	6959      	ldr	r1, [r3, #20]
 80006de:	4b21      	ldr	r3, [pc, #132]	; (8000764 <display_start+0xd0>)
 80006e0:	685a      	ldr	r2, [r3, #4]
 80006e2:	23a0      	movs	r3, #160	; 0xa0
 80006e4:	05db      	lsls	r3, r3, #23
 80006e6:	430a      	orrs	r2, r1
 80006e8:	615a      	str	r2, [r3, #20]
	delay(LEDDELAY);
 80006ea:	23fa      	movs	r3, #250	; 0xfa
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	0018      	movs	r0, r3
 80006f0:	f000 fc10 	bl	8000f14 <delay>

	clear();
 80006f4:	f000 fbfa 	bl	8000eec <clear>
	GPIOB->ODR |= numb[0];
 80006f8:	4b18      	ldr	r3, [pc, #96]	; (800075c <display_start+0xc8>)
 80006fa:	6959      	ldr	r1, [r3, #20]
 80006fc:	4b18      	ldr	r3, [pc, #96]	; (8000760 <display_start+0xcc>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b16      	ldr	r3, [pc, #88]	; (800075c <display_start+0xc8>)
 8000702:	430a      	orrs	r2, r1
 8000704:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= digit[2];
 8000706:	23a0      	movs	r3, #160	; 0xa0
 8000708:	05db      	lsls	r3, r3, #23
 800070a:	6959      	ldr	r1, [r3, #20]
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <display_start+0xd0>)
 800070e:	689a      	ldr	r2, [r3, #8]
 8000710:	23a0      	movs	r3, #160	; 0xa0
 8000712:	05db      	lsls	r3, r3, #23
 8000714:	430a      	orrs	r2, r1
 8000716:	615a      	str	r2, [r3, #20]
	delay(LEDDELAY);
 8000718:	23fa      	movs	r3, #250	; 0xfa
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	0018      	movs	r0, r3
 800071e:	f000 fbf9 	bl	8000f14 <delay>

	clear();
 8000722:	f000 fbe3 	bl	8000eec <clear>
	GPIOB->ODR |= numb[5];
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <display_start+0xc8>)
 8000728:	6959      	ldr	r1, [r3, #20]
 800072a:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <display_start+0xcc>)
 800072c:	695a      	ldr	r2, [r3, #20]
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <display_start+0xc8>)
 8000730:	430a      	orrs	r2, r1
 8000732:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= digit[3];
 8000734:	23a0      	movs	r3, #160	; 0xa0
 8000736:	05db      	lsls	r3, r3, #23
 8000738:	6959      	ldr	r1, [r3, #20]
 800073a:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <display_start+0xd0>)
 800073c:	68da      	ldr	r2, [r3, #12]
 800073e:	23a0      	movs	r3, #160	; 0xa0
 8000740:	05db      	lsls	r3, r3, #23
 8000742:	430a      	orrs	r2, r1
 8000744:	615a      	str	r2, [r3, #20]
	delay(LEDDELAY);
 8000746:	23fa      	movs	r3, #250	; 0xfa
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	0018      	movs	r0, r3
 800074c:	f000 fbe2 	bl	8000f14 <delay>

	clear();
 8000750:	f000 fbcc 	bl	8000eec <clear>
}
 8000754:	46c0      	nop			; (mov r8, r8)
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	50000400 	.word	0x50000400
 8000760:	20000010 	.word	0x20000010
 8000764:	20000000 	.word	0x20000000

08000768 <enable_adc>:

void enable_adc(void){ ADC1->CR |= (1U << 2); }
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
 800076c:	4b04      	ldr	r3, [pc, #16]	; (8000780 <enable_adc+0x18>)
 800076e:	689a      	ldr	r2, [r3, #8]
 8000770:	4b03      	ldr	r3, [pc, #12]	; (8000780 <enable_adc+0x18>)
 8000772:	2104      	movs	r1, #4
 8000774:	430a      	orrs	r2, r1
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	46c0      	nop			; (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	40012400 	.word	0x40012400

08000784 <disable_adc>:
void disable_adc(void) { ADC1->CR |= (0U << 2); }
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
 8000788:	4a03      	ldr	r2, [pc, #12]	; (8000798 <disable_adc+0x14>)
 800078a:	4b03      	ldr	r3, [pc, #12]	; (8000798 <disable_adc+0x14>)
 800078c:	6892      	ldr	r2, [r2, #8]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	46c0      	nop			; (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	40012400 	.word	0x40012400

0800079c <display_status>:

void display_status(void){
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
	for(int i = 0; i < 3; i++){
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	e01d      	b.n	80007e4 <display_status+0x48>
		clear();
 80007a8:	f000 fba0 	bl	8000eec <clear>
		GPIOB->ODR |= stat[i];
 80007ac:	4b1f      	ldr	r3, [pc, #124]	; (800082c <display_status+0x90>)
 80007ae:	6959      	ldr	r1, [r3, #20]
 80007b0:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <display_status+0x94>)
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	0092      	lsls	r2, r2, #2
 80007b6:	58d2      	ldr	r2, [r2, r3]
 80007b8:	4b1c      	ldr	r3, [pc, #112]	; (800082c <display_status+0x90>)
 80007ba:	430a      	orrs	r2, r1
 80007bc:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= digit[i];
 80007be:	23a0      	movs	r3, #160	; 0xa0
 80007c0:	05db      	lsls	r3, r3, #23
 80007c2:	6959      	ldr	r1, [r3, #20]
 80007c4:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <display_status+0x98>)
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	0092      	lsls	r2, r2, #2
 80007ca:	58d2      	ldr	r2, [r2, r3]
 80007cc:	23a0      	movs	r3, #160	; 0xa0
 80007ce:	05db      	lsls	r3, r3, #23
 80007d0:	430a      	orrs	r2, r1
 80007d2:	615a      	str	r2, [r3, #20]
		delay(LEDDELAY);
 80007d4:	23fa      	movs	r3, #250	; 0xfa
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	0018      	movs	r0, r3
 80007da:	f000 fb9b 	bl	8000f14 <delay>
	for(int i = 0; i < 3; i++){
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	3301      	adds	r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b02      	cmp	r3, #2
 80007e8:	ddde      	ble.n	80007a8 <display_status+0xc>
	}

	clear();
 80007ea:	f000 fb7f 	bl	8000eec <clear>
	GPIOB->ODR |= numb[ava];
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <display_status+0x90>)
 80007f0:	6959      	ldr	r1, [r3, #20]
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <display_status+0x9c>)
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <display_status+0xa0>)
 80007f8:	0092      	lsls	r2, r2, #2
 80007fa:	58d2      	ldr	r2, [r2, r3]
 80007fc:	4b0b      	ldr	r3, [pc, #44]	; (800082c <display_status+0x90>)
 80007fe:	430a      	orrs	r2, r1
 8000800:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= digit[3];
 8000802:	23a0      	movs	r3, #160	; 0xa0
 8000804:	05db      	lsls	r3, r3, #23
 8000806:	6959      	ldr	r1, [r3, #20]
 8000808:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <display_status+0x98>)
 800080a:	68da      	ldr	r2, [r3, #12]
 800080c:	23a0      	movs	r3, #160	; 0xa0
 800080e:	05db      	lsls	r3, r3, #23
 8000810:	430a      	orrs	r2, r1
 8000812:	615a      	str	r2, [r3, #20]
	delay(LEDDELAY);
 8000814:	23fa      	movs	r3, #250	; 0xfa
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	0018      	movs	r0, r3
 800081a:	f000 fb7b 	bl	8000f14 <delay>
	clear();
 800081e:	f000 fb65 	bl	8000eec <clear>
}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	46bd      	mov	sp, r7
 8000826:	b002      	add	sp, #8
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	50000400 	.word	0x50000400
 8000830:	20000038 	.word	0x20000038
 8000834:	20000000 	.word	0x20000000
 8000838:	20000080 	.word	0x20000080
 800083c:	20000010 	.word	0x20000010

08000840 <display_record>:

void display_record(int x){
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 3; i++){
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	e01d      	b.n	800088a <display_record+0x4a>
		clear();
 800084e:	f000 fb4d 	bl	8000eec <clear>
		GPIOB->ODR |= rec[i];
 8000852:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <display_record+0x90>)
 8000854:	6959      	ldr	r1, [r3, #20]
 8000856:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <display_record+0x94>)
 8000858:	68fa      	ldr	r2, [r7, #12]
 800085a:	0092      	lsls	r2, r2, #2
 800085c:	58d2      	ldr	r2, [r2, r3]
 800085e:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <display_record+0x90>)
 8000860:	430a      	orrs	r2, r1
 8000862:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= digit[i];
 8000864:	23a0      	movs	r3, #160	; 0xa0
 8000866:	05db      	lsls	r3, r3, #23
 8000868:	6959      	ldr	r1, [r3, #20]
 800086a:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <display_record+0x98>)
 800086c:	68fa      	ldr	r2, [r7, #12]
 800086e:	0092      	lsls	r2, r2, #2
 8000870:	58d2      	ldr	r2, [r2, r3]
 8000872:	23a0      	movs	r3, #160	; 0xa0
 8000874:	05db      	lsls	r3, r3, #23
 8000876:	430a      	orrs	r2, r1
 8000878:	615a      	str	r2, [r3, #20]
		delay(LEDDELAY);
 800087a:	23fa      	movs	r3, #250	; 0xfa
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	0018      	movs	r0, r3
 8000880:	f000 fb48 	bl	8000f14 <delay>
	for(int i = 0; i < 3; i++){
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	3301      	adds	r3, #1
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	2b02      	cmp	r3, #2
 800088e:	ddde      	ble.n	800084e <display_record+0xe>
	}

	clear();
 8000890:	f000 fb2c 	bl	8000eec <clear>
	GPIOB->ODR |= numb[x];
 8000894:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <display_record+0x90>)
 8000896:	6959      	ldr	r1, [r3, #20]
 8000898:	4b10      	ldr	r3, [pc, #64]	; (80008dc <display_record+0x9c>)
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	0092      	lsls	r2, r2, #2
 800089e:	58d2      	ldr	r2, [r2, r3]
 80008a0:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <display_record+0x90>)
 80008a2:	430a      	orrs	r2, r1
 80008a4:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= digit[3];
 80008a6:	23a0      	movs	r3, #160	; 0xa0
 80008a8:	05db      	lsls	r3, r3, #23
 80008aa:	6959      	ldr	r1, [r3, #20]
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <display_record+0x98>)
 80008ae:	68da      	ldr	r2, [r3, #12]
 80008b0:	23a0      	movs	r3, #160	; 0xa0
 80008b2:	05db      	lsls	r3, r3, #23
 80008b4:	430a      	orrs	r2, r1
 80008b6:	615a      	str	r2, [r3, #20]
	delay(LEDDELAY);
 80008b8:	23fa      	movs	r3, #250	; 0xfa
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	0018      	movs	r0, r3
 80008be:	f000 fb29 	bl	8000f14 <delay>
	clear();
 80008c2:	f000 fb13 	bl	8000eec <clear>
}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b004      	add	sp, #16
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	50000400 	.word	0x50000400
 80008d4:	20000044 	.word	0x20000044
 80008d8:	20000000 	.word	0x20000000
 80008dc:	20000010 	.word	0x20000010

080008e0 <display_playback>:

void display_playback(int x){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 3; i++){
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	e01d      	b.n	800092a <display_playback+0x4a>
		clear();
 80008ee:	f000 fafd 	bl	8000eec <clear>
		GPIOB->ODR |= play[i];
 80008f2:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <display_playback+0x90>)
 80008f4:	6959      	ldr	r1, [r3, #20]
 80008f6:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <display_playback+0x94>)
 80008f8:	68fa      	ldr	r2, [r7, #12]
 80008fa:	0092      	lsls	r2, r2, #2
 80008fc:	58d2      	ldr	r2, [r2, r3]
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <display_playback+0x90>)
 8000900:	430a      	orrs	r2, r1
 8000902:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= digit[i];
 8000904:	23a0      	movs	r3, #160	; 0xa0
 8000906:	05db      	lsls	r3, r3, #23
 8000908:	6959      	ldr	r1, [r3, #20]
 800090a:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <display_playback+0x98>)
 800090c:	68fa      	ldr	r2, [r7, #12]
 800090e:	0092      	lsls	r2, r2, #2
 8000910:	58d2      	ldr	r2, [r2, r3]
 8000912:	23a0      	movs	r3, #160	; 0xa0
 8000914:	05db      	lsls	r3, r3, #23
 8000916:	430a      	orrs	r2, r1
 8000918:	615a      	str	r2, [r3, #20]
		delay(LEDDELAY);
 800091a:	23fa      	movs	r3, #250	; 0xfa
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	0018      	movs	r0, r3
 8000920:	f000 faf8 	bl	8000f14 <delay>
	for(int i = 0; i < 3; i++){
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	3301      	adds	r3, #1
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	2b02      	cmp	r3, #2
 800092e:	ddde      	ble.n	80008ee <display_playback+0xe>
	}

	clear();
 8000930:	f000 fadc 	bl	8000eec <clear>
	GPIOB->ODR |= numb[x];
 8000934:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <display_playback+0x90>)
 8000936:	6959      	ldr	r1, [r3, #20]
 8000938:	4b10      	ldr	r3, [pc, #64]	; (800097c <display_playback+0x9c>)
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	0092      	lsls	r2, r2, #2
 800093e:	58d2      	ldr	r2, [r2, r3]
 8000940:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <display_playback+0x90>)
 8000942:	430a      	orrs	r2, r1
 8000944:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= digit[3];
 8000946:	23a0      	movs	r3, #160	; 0xa0
 8000948:	05db      	lsls	r3, r3, #23
 800094a:	6959      	ldr	r1, [r3, #20]
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <display_playback+0x98>)
 800094e:	68da      	ldr	r2, [r3, #12]
 8000950:	23a0      	movs	r3, #160	; 0xa0
 8000952:	05db      	lsls	r3, r3, #23
 8000954:	430a      	orrs	r2, r1
 8000956:	615a      	str	r2, [r3, #20]
	delay(LEDDELAY);
 8000958:	23fa      	movs	r3, #250	; 0xfa
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	0018      	movs	r0, r3
 800095e:	f000 fad9 	bl	8000f14 <delay>
	clear();
 8000962:	f000 fac3 	bl	8000eec <clear>
}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	46bd      	mov	sp, r7
 800096a:	b004      	add	sp, #16
 800096c:	bd80      	pop	{r7, pc}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	50000400 	.word	0x50000400
 8000974:	20000050 	.word	0x20000050
 8000978:	20000000 	.word	0x20000000
 800097c:	20000010 	.word	0x20000010

08000980 <display_idle>:

void display_idle(void){
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; i++){
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	e01d      	b.n	80009c8 <display_idle+0x48>
		clear();
 800098c:	f000 faae 	bl	8000eec <clear>
		GPIOB->ODR |= idle[i];
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <display_idle+0x5c>)
 8000992:	6959      	ldr	r1, [r3, #20]
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <display_idle+0x60>)
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	0092      	lsls	r2, r2, #2
 800099a:	58d2      	ldr	r2, [r2, r3]
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <display_idle+0x5c>)
 800099e:	430a      	orrs	r2, r1
 80009a0:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= digit[i];
 80009a2:	23a0      	movs	r3, #160	; 0xa0
 80009a4:	05db      	lsls	r3, r3, #23
 80009a6:	6959      	ldr	r1, [r3, #20]
 80009a8:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <display_idle+0x64>)
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	0092      	lsls	r2, r2, #2
 80009ae:	58d2      	ldr	r2, [r2, r3]
 80009b0:	23a0      	movs	r3, #160	; 0xa0
 80009b2:	05db      	lsls	r3, r3, #23
 80009b4:	430a      	orrs	r2, r1
 80009b6:	615a      	str	r2, [r3, #20]
		delay(LEDDELAY);
 80009b8:	23fa      	movs	r3, #250	; 0xfa
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	0018      	movs	r0, r3
 80009be:	f000 faa9 	bl	8000f14 <delay>
	for(int i = 0; i < 4; i++){
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	3301      	adds	r3, #1
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	ddde      	ble.n	800098c <display_idle+0xc>
	}
	clear();
 80009ce:	f000 fa8d 	bl	8000eec <clear>
}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b002      	add	sp, #8
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	50000400 	.word	0x50000400
 80009e0:	20000060 	.word	0x20000060
 80009e4:	20000000 	.word	0x20000000

080009e8 <display_full>:

void display_full(void){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; i++){
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	e01d      	b.n	8000a30 <display_full+0x48>
		clear();
 80009f4:	f000 fa7a 	bl	8000eec <clear>
		GPIOB->ODR |= full[i];
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <display_full+0x5c>)
 80009fa:	6959      	ldr	r1, [r3, #20]
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <display_full+0x60>)
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	0092      	lsls	r2, r2, #2
 8000a02:	58d2      	ldr	r2, [r2, r3]
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <display_full+0x5c>)
 8000a06:	430a      	orrs	r2, r1
 8000a08:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= digit[i];
 8000a0a:	23a0      	movs	r3, #160	; 0xa0
 8000a0c:	05db      	lsls	r3, r3, #23
 8000a0e:	6959      	ldr	r1, [r3, #20]
 8000a10:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <display_full+0x64>)
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	0092      	lsls	r2, r2, #2
 8000a16:	58d2      	ldr	r2, [r2, r3]
 8000a18:	23a0      	movs	r3, #160	; 0xa0
 8000a1a:	05db      	lsls	r3, r3, #23
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	615a      	str	r2, [r3, #20]
		delay(LEDDELAY);
 8000a20:	23fa      	movs	r3, #250	; 0xfa
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	0018      	movs	r0, r3
 8000a26:	f000 fa75 	bl	8000f14 <delay>
	for(int i = 0; i < 4; i++){
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2b03      	cmp	r3, #3
 8000a34:	ddde      	ble.n	80009f4 <display_full+0xc>
	}
	clear();
 8000a36:	f000 fa59 	bl	8000eec <clear>
}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	b002      	add	sp, #8
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	50000400 	.word	0x50000400
 8000a48:	20000070 	.word	0x20000070
 8000a4c:	20000000 	.word	0x20000000

08000a50 <button_handler>:

void button_handler(void){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	if( row == 1 && col == 1 )
 8000a54:	4b32      	ldr	r3, [pc, #200]	; (8000b20 <button_handler+0xd0>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d107      	bne.n	8000a6c <button_handler+0x1c>
 8000a5c:	4b31      	ldr	r3, [pc, #196]	; (8000b24 <button_handler+0xd4>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d103      	bne.n	8000a6c <button_handler+0x1c>
		button = one;
 8000a64:	4b30      	ldr	r3, [pc, #192]	; (8000b28 <button_handler+0xd8>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	701a      	strb	r2, [r3, #0]
 8000a6a:	e056      	b.n	8000b1a <button_handler+0xca>

	else if(  row == 1 && col == 2 )
 8000a6c:	4b2c      	ldr	r3, [pc, #176]	; (8000b20 <button_handler+0xd0>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d107      	bne.n	8000a84 <button_handler+0x34>
 8000a74:	4b2b      	ldr	r3, [pc, #172]	; (8000b24 <button_handler+0xd4>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	d103      	bne.n	8000a84 <button_handler+0x34>
		button = two;
 8000a7c:	4b2a      	ldr	r3, [pc, #168]	; (8000b28 <button_handler+0xd8>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	701a      	strb	r2, [r3, #0]
 8000a82:	e04a      	b.n	8000b1a <button_handler+0xca>

	else if(  row == 1 && col == 3 )
 8000a84:	4b26      	ldr	r3, [pc, #152]	; (8000b20 <button_handler+0xd0>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d107      	bne.n	8000a9c <button_handler+0x4c>
 8000a8c:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <button_handler+0xd4>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b03      	cmp	r3, #3
 8000a92:	d103      	bne.n	8000a9c <button_handler+0x4c>
		button = three;
 8000a94:	4b24      	ldr	r3, [pc, #144]	; (8000b28 <button_handler+0xd8>)
 8000a96:	2202      	movs	r2, #2
 8000a98:	701a      	strb	r2, [r3, #0]
 8000a9a:	e03e      	b.n	8000b1a <button_handler+0xca>

	else if(  row == 1 && col == 4 ){
 8000a9c:	4b20      	ldr	r3, [pc, #128]	; (8000b20 <button_handler+0xd0>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d107      	bne.n	8000ab4 <button_handler+0x64>
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <button_handler+0xd4>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b04      	cmp	r3, #4
 8000aaa:	d103      	bne.n	8000ab4 <button_handler+0x64>
		button = stop_pause;
 8000aac:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <button_handler+0xd8>)
 8000aae:	2204      	movs	r2, #4
 8000ab0:	701a      	strb	r2, [r3, #0]
 8000ab2:	e032      	b.n	8000b1a <button_handler+0xca>
	}


	else if(  row == 2 && col == 1 )
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <button_handler+0xd0>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b02      	cmp	r3, #2
 8000aba:	d107      	bne.n	8000acc <button_handler+0x7c>
 8000abc:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <button_handler+0xd4>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d103      	bne.n	8000acc <button_handler+0x7c>
		button = four;
 8000ac4:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <button_handler+0xd8>)
 8000ac6:	2203      	movs	r2, #3
 8000ac8:	701a      	strb	r2, [r3, #0]
 8000aca:	e026      	b.n	8000b1a <button_handler+0xca>

	else if(  row == 2 && col == 2 )
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <button_handler+0xd0>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b02      	cmp	r3, #2
 8000ad2:	d107      	bne.n	8000ae4 <button_handler+0x94>
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <button_handler+0xd4>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d103      	bne.n	8000ae4 <button_handler+0x94>
		button = track_status;
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <button_handler+0xd8>)
 8000ade:	2206      	movs	r2, #6
 8000ae0:	701a      	strb	r2, [r3, #0]
 8000ae2:	e01a      	b.n	8000b1a <button_handler+0xca>

	else if(  row == 2 && col == 3 )
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <button_handler+0xd0>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	d107      	bne.n	8000afc <button_handler+0xac>
 8000aec:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <button_handler+0xd4>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b03      	cmp	r3, #3
 8000af2:	d103      	bne.n	8000afc <button_handler+0xac>
		button = playback;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <button_handler+0xd8>)
 8000af6:	2207      	movs	r2, #7
 8000af8:	701a      	strb	r2, [r3, #0]
 8000afa:	e00e      	b.n	8000b1a <button_handler+0xca>

	else if(  row == 2 && col == 4 )
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <button_handler+0xd0>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d107      	bne.n	8000b14 <button_handler+0xc4>
 8000b04:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <button_handler+0xd4>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b04      	cmp	r3, #4
 8000b0a:	d103      	bne.n	8000b14 <button_handler+0xc4>
		button = delete;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <button_handler+0xd8>)
 8000b0e:	2205      	movs	r2, #5
 8000b10:	701a      	strb	r2, [r3, #0]
 8000b12:	e002      	b.n	8000b1a <button_handler+0xca>

	else
		button = nop;
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <button_handler+0xd8>)
 8000b16:	2208      	movs	r2, #8
 8000b18:	701a      	strb	r2, [r3, #0]

}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	200000bc 	.word	0x200000bc
 8000b24:	200000b4 	.word	0x200000b4
 8000b28:	200000b0 	.word	0x200000b0

08000b2c <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0

	uint32_t c;
	c = (GPIOA->IDR >> 9);
 8000b32:	23a0      	movs	r3, #160	; 0xa0
 8000b34:	05db      	lsls	r3, r3, #23
 8000b36:	691b      	ldr	r3, [r3, #16]
 8000b38:	0a5b      	lsrs	r3, r3, #9
 8000b3a:	607b      	str	r3, [r7, #4]
	c &= (uint32_t)(0xF);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	220f      	movs	r2, #15
 8000b40:	4013      	ands	r3, r2
 8000b42:	607b      	str	r3, [r7, #4]

	if( c ){
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d060      	beq.n	8000c0c <EXTI4_15_IRQHandler+0xe0>
		GPIOA->ODR ^= (1U << 6);
 8000b4a:	23a0      	movs	r3, #160	; 0xa0
 8000b4c:	05db      	lsls	r3, r3, #23
 8000b4e:	695a      	ldr	r2, [r3, #20]
 8000b50:	23a0      	movs	r3, #160	; 0xa0
 8000b52:	05db      	lsls	r3, r3, #23
 8000b54:	2140      	movs	r1, #64	; 0x40
 8000b56:	404a      	eors	r2, r1
 8000b58:	615a      	str	r2, [r3, #20]
		if( (c >> 0) ){
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d002      	beq.n	8000b66 <EXTI4_15_IRQHandler+0x3a>
			row = 1;
 8000b60:	4b33      	ldr	r3, [pc, #204]	; (8000c30 <EXTI4_15_IRQHandler+0x104>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	601a      	str	r2, [r3, #0]
		}
		GPIOA->ODR ^= (1U << 6);
 8000b66:	23a0      	movs	r3, #160	; 0xa0
 8000b68:	05db      	lsls	r3, r3, #23
 8000b6a:	695a      	ldr	r2, [r3, #20]
 8000b6c:	23a0      	movs	r3, #160	; 0xa0
 8000b6e:	05db      	lsls	r3, r3, #23
 8000b70:	2140      	movs	r1, #64	; 0x40
 8000b72:	404a      	eors	r2, r1
 8000b74:	615a      	str	r2, [r3, #20]

		GPIOA->ODR ^= (1U << 7);
 8000b76:	23a0      	movs	r3, #160	; 0xa0
 8000b78:	05db      	lsls	r3, r3, #23
 8000b7a:	695a      	ldr	r2, [r3, #20]
 8000b7c:	23a0      	movs	r3, #160	; 0xa0
 8000b7e:	05db      	lsls	r3, r3, #23
 8000b80:	2180      	movs	r1, #128	; 0x80
 8000b82:	404a      	eors	r2, r1
 8000b84:	615a      	str	r2, [r3, #20]
		c = (GPIOA->IDR >> 9);
 8000b86:	23a0      	movs	r3, #160	; 0xa0
 8000b88:	05db      	lsls	r3, r3, #23
 8000b8a:	691b      	ldr	r3, [r3, #16]
 8000b8c:	0a5b      	lsrs	r3, r3, #9
 8000b8e:	607b      	str	r3, [r7, #4]
		c &= (uint32_t)(0xF);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	220f      	movs	r2, #15
 8000b94:	4013      	ands	r3, r2
 8000b96:	607b      	str	r3, [r7, #4]
		if( (c >> 0) ){
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d002      	beq.n	8000ba4 <EXTI4_15_IRQHandler+0x78>
			row = 2;
 8000b9e:	4b24      	ldr	r3, [pc, #144]	; (8000c30 <EXTI4_15_IRQHandler+0x104>)
 8000ba0:	2202      	movs	r2, #2
 8000ba2:	601a      	str	r2, [r3, #0]
		}
		GPIOA->ODR ^= (1U << 7);
 8000ba4:	23a0      	movs	r3, #160	; 0xa0
 8000ba6:	05db      	lsls	r3, r3, #23
 8000ba8:	695a      	ldr	r2, [r3, #20]
 8000baa:	23a0      	movs	r3, #160	; 0xa0
 8000bac:	05db      	lsls	r3, r3, #23
 8000bae:	2180      	movs	r1, #128	; 0x80
 8000bb0:	404a      	eors	r2, r1
 8000bb2:	615a      	str	r2, [r3, #20]

		int plexer =  (int)(EXTI->RPR1 >> 9);
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <EXTI4_15_IRQHandler+0x108>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	0a5b      	lsrs	r3, r3, #9
 8000bba:	603b      	str	r3, [r7, #0]

		if( plexer == 1 ){
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d103      	bne.n	8000bca <EXTI4_15_IRQHandler+0x9e>
			col = 1;
 8000bc2:	4b1d      	ldr	r3, [pc, #116]	; (8000c38 <EXTI4_15_IRQHandler+0x10c>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	e010      	b.n	8000bec <EXTI4_15_IRQHandler+0xc0>
		}
		else if( plexer == 2 ){
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d103      	bne.n	8000bd8 <EXTI4_15_IRQHandler+0xac>
			col = 2;
 8000bd0:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <EXTI4_15_IRQHandler+0x10c>)
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	e009      	b.n	8000bec <EXTI4_15_IRQHandler+0xc0>
		}
		else if( plexer == 4 ){
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	2b04      	cmp	r3, #4
 8000bdc:	d103      	bne.n	8000be6 <EXTI4_15_IRQHandler+0xba>
			col = 3;
 8000bde:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <EXTI4_15_IRQHandler+0x10c>)
 8000be0:	2203      	movs	r2, #3
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	e002      	b.n	8000bec <EXTI4_15_IRQHandler+0xc0>
		}
		else{
			col = 4;
 8000be6:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <EXTI4_15_IRQHandler+0x10c>)
 8000be8:	2204      	movs	r2, #4
 8000bea:	601a      	str	r2, [r3, #0]
		}
		button_handler();
 8000bec:	f7ff ff30 	bl	8000a50 <button_handler>

		EXTI->RPR1 |= (15U << 9);
 8000bf0:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <EXTI4_15_IRQHandler+0x108>)
 8000bf2:	68da      	ldr	r2, [r3, #12]
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <EXTI4_15_IRQHandler+0x108>)
 8000bf6:	21f0      	movs	r1, #240	; 0xf0
 8000bf8:	0149      	lsls	r1, r1, #5
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	60da      	str	r2, [r3, #12]

		ticker = 0;
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <EXTI4_15_IRQHandler+0x110>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
		loop = track_selected;
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <EXTI4_15_IRQHandler+0x114>)
 8000c06:	2202      	movs	r2, #2
 8000c08:	701a      	strb	r2, [r3, #0]
		return;
 8000c0a:	e00e      	b.n	8000c2a <EXTI4_15_IRQHandler+0xfe>
	}

	row = 0;
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <EXTI4_15_IRQHandler+0x104>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
	col = 0;
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <EXTI4_15_IRQHandler+0x10c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
	button_handler();
 8000c18:	f7ff ff1a 	bl	8000a50 <button_handler>

	EXTI->RPR1 |= (15U << 9);
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <EXTI4_15_IRQHandler+0x108>)
 8000c1e:	68da      	ldr	r2, [r3, #12]
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <EXTI4_15_IRQHandler+0x108>)
 8000c22:	21f0      	movs	r1, #240	; 0xf0
 8000c24:	0149      	lsls	r1, r1, #5
 8000c26:	430a      	orrs	r2, r1
 8000c28:	60da      	str	r2, [r3, #12]
}
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b002      	add	sp, #8
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	200000bc 	.word	0x200000bc
 8000c34:	40021800 	.word	0x40021800
 8000c38:	200000b4 	.word	0x200000b4
 8000c3c:	200000a4 	.word	0x200000a4
 8000c40:	200000a8 	.word	0x200000a8

08000c44 <track_handler>:

		I2C1->TXDR |= (uint32_t)data;

}

void track_handler(){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
	ticker++;
 8000c4a:	4b38      	ldr	r3, [pc, #224]	; (8000d2c <track_handler+0xe8>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	1c5a      	adds	r2, r3, #1
 8000c50:	4b36      	ldr	r3, [pc, #216]	; (8000d2c <track_handler+0xe8>)
 8000c52:	601a      	str	r2, [r3, #0]
	if( ticker == second/100 ){
 8000c54:	4b35      	ldr	r3, [pc, #212]	; (8000d2c <track_handler+0xe8>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b0a      	cmp	r3, #10
 8000c5a:	d106      	bne.n	8000c6a <track_handler+0x26>
		ticker = 0;
 8000c5c:	4b33      	ldr	r3, [pc, #204]	; (8000d2c <track_handler+0xe8>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
		loop = idlee;
 8000c62:	4b33      	ldr	r3, [pc, #204]	; (8000d30 <track_handler+0xec>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	701a      	strb	r2, [r3, #0]
		return;
 8000c68:	e05d      	b.n	8000d26 <track_handler+0xe2>
	}

	switch(button){
 8000c6a:	4b32      	ldr	r3, [pc, #200]	; (8000d34 <track_handler+0xf0>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b07      	cmp	r3, #7
 8000c70:	d858      	bhi.n	8000d24 <track_handler+0xe0>
 8000c72:	009a      	lsls	r2, r3, #2
 8000c74:	4b30      	ldr	r3, [pc, #192]	; (8000d38 <track_handler+0xf4>)
 8000c76:	18d3      	adds	r3, r2, r3
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	469f      	mov	pc, r3
		case one:
			track = track1;
 8000c7c:	4b2f      	ldr	r3, [pc, #188]	; (8000d3c <track_handler+0xf8>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < second; i++)
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	e005      	b.n	8000c94 <track_handler+0x50>
				display_numb(1);
 8000c88:	2001      	movs	r0, #1
 8000c8a:	f000 f905 	bl	8000e98 <display_numb>
			for(int i = 0; i < second; i++)
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	3301      	adds	r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4a2a      	ldr	r2, [pc, #168]	; (8000d40 <track_handler+0xfc>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	ddf5      	ble.n	8000c88 <track_handler+0x44>
			break;
 8000c9c:	e043      	b.n	8000d26 <track_handler+0xe2>
		case two:
			track = track2;
 8000c9e:	4b27      	ldr	r3, [pc, #156]	; (8000d3c <track_handler+0xf8>)
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < second; i++)
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	e005      	b.n	8000cb6 <track_handler+0x72>
				display_numb(2);
 8000caa:	2002      	movs	r0, #2
 8000cac:	f000 f8f4 	bl	8000e98 <display_numb>
			for(int i = 0; i < second; i++)
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	4a21      	ldr	r2, [pc, #132]	; (8000d40 <track_handler+0xfc>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	ddf5      	ble.n	8000caa <track_handler+0x66>
			break;
 8000cbe:	e032      	b.n	8000d26 <track_handler+0xe2>
		case three:
			track = track3;
 8000cc0:	4b1e      	ldr	r3, [pc, #120]	; (8000d3c <track_handler+0xf8>)
 8000cc2:	2203      	movs	r2, #3
 8000cc4:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < second; i++)
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	e005      	b.n	8000cd8 <track_handler+0x94>
				display_numb(3);
 8000ccc:	2003      	movs	r0, #3
 8000cce:	f000 f8e3 	bl	8000e98 <display_numb>
			for(int i = 0; i < second; i++)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a19      	ldr	r2, [pc, #100]	; (8000d40 <track_handler+0xfc>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	ddf5      	ble.n	8000ccc <track_handler+0x88>
			break;
 8000ce0:	e021      	b.n	8000d26 <track_handler+0xe2>
		case four:
			track = track4;
 8000ce2:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <track_handler+0xf8>)
 8000ce4:	2204      	movs	r2, #4
 8000ce6:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < second; i++)
 8000ce8:	2300      	movs	r3, #0
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	e005      	b.n	8000cfa <track_handler+0xb6>
				display_numb(4);
 8000cee:	2004      	movs	r0, #4
 8000cf0:	f000 f8d2 	bl	8000e98 <display_numb>
			for(int i = 0; i < second; i++)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	603b      	str	r3, [r7, #0]
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	4a10      	ldr	r2, [pc, #64]	; (8000d40 <track_handler+0xfc>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	ddf5      	ble.n	8000cee <track_handler+0xaa>
			break;
 8000d02:	e010      	b.n	8000d26 <track_handler+0xe2>
		case track_status:
			loop = avab;
 8000d04:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <track_handler+0xec>)
 8000d06:	2206      	movs	r2, #6
 8000d08:	701a      	strb	r2, [r3, #0]
			break;
 8000d0a:	e00c      	b.n	8000d26 <track_handler+0xe2>
		case delete:
			ava = 1;
 8000d0c:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <track_handler+0x100>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	601a      	str	r2, [r3, #0]
			break;
 8000d12:	e008      	b.n	8000d26 <track_handler+0xe2>

		case playback:
			loop = plb;
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <track_handler+0xec>)
 8000d16:	2204      	movs	r2, #4
 8000d18:	701a      	strb	r2, [r3, #0]
			break;
 8000d1a:	e004      	b.n	8000d26 <track_handler+0xe2>
		case stop_pause:
			loop = record;
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <track_handler+0xec>)
 8000d1e:	2203      	movs	r2, #3
 8000d20:	701a      	strb	r2, [r3, #0]
			break;
 8000d22:	e000      	b.n	8000d26 <track_handler+0xe2>
		default:
			break;
 8000d24:	46c0      	nop			; (mov r8, r8)

	}


}
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b004      	add	sp, #16
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	200000a4 	.word	0x200000a4
 8000d30:	200000a8 	.word	0x200000a8
 8000d34:	200000b0 	.word	0x200000b0
 8000d38:	0800100c 	.word	0x0800100c
 8000d3c:	200000b8 	.word	0x200000b8
 8000d40:	000003e7 	.word	0x000003e7
 8000d44:	20000080 	.word	0x20000080

08000d48 <state_handler>:

void state_handler(void){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
	switch(loop){
 8000d4e:	4b26      	ldr	r3, [pc, #152]	; (8000de8 <state_handler+0xa0>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b06      	cmp	r3, #6
 8000d54:	d841      	bhi.n	8000dda <state_handler+0x92>
 8000d56:	009a      	lsls	r2, r3, #2
 8000d58:	4b24      	ldr	r3, [pc, #144]	; (8000dec <state_handler+0xa4>)
 8000d5a:	18d3      	adds	r3, r2, r3
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	469f      	mov	pc, r3
		case start:
			for(int i = 0; i < second; i++)
 8000d60:	2300      	movs	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	e004      	b.n	8000d70 <state_handler+0x28>
				display_start();
 8000d66:	f7ff fc95 	bl	8000694 <display_start>
			for(int i = 0; i < second; i++)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4a1f      	ldr	r2, [pc, #124]	; (8000df0 <state_handler+0xa8>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	ddf6      	ble.n	8000d66 <state_handler+0x1e>
			loop = idlee;
 8000d78:	4b1b      	ldr	r3, [pc, #108]	; (8000de8 <state_handler+0xa0>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	701a      	strb	r2, [r3, #0]
			break;
 8000d7e:	e02f      	b.n	8000de0 <state_handler+0x98>

		case idlee:
			display_idle();
 8000d80:	f7ff fdfe 	bl	8000980 <display_idle>
			break;
 8000d84:	e02c      	b.n	8000de0 <state_handler+0x98>
		case track_selected:
			track_handler();
 8000d86:	f7ff ff5d 	bl	8000c44 <track_handler>
			break;
 8000d8a:	e029      	b.n	8000de0 <state_handler+0x98>
		case avab:
			if( ava ){
 8000d8c:	4b19      	ldr	r3, [pc, #100]	; (8000df4 <state_handler+0xac>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d00c      	beq.n	8000dae <state_handler+0x66>
				for(int i = 0; i < second; i++)
 8000d94:	2300      	movs	r3, #0
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	e004      	b.n	8000da4 <state_handler+0x5c>
					display_status();
 8000d9a:	f7ff fcff 	bl	800079c <display_status>
				for(int i = 0; i < second; i++)
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	3301      	adds	r3, #1
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <state_handler+0xa8>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	ddf6      	ble.n	8000d9a <state_handler+0x52>
 8000dac:	e00b      	b.n	8000dc6 <state_handler+0x7e>
			}
			else{
				for(int i = 0; i < second; i++)
 8000dae:	2300      	movs	r3, #0
 8000db0:	607b      	str	r3, [r7, #4]
 8000db2:	e004      	b.n	8000dbe <state_handler+0x76>
					display_full();
 8000db4:	f7ff fe18 	bl	80009e8 <display_full>
				for(int i = 0; i < second; i++)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a0b      	ldr	r2, [pc, #44]	; (8000df0 <state_handler+0xa8>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	ddf6      	ble.n	8000db4 <state_handler+0x6c>
			}
			loop = idlee;
 8000dc6:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <state_handler+0xa0>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	701a      	strb	r2, [r3, #0]
			break;
 8000dcc:	e008      	b.n	8000de0 <state_handler+0x98>
		case plb:
			track_play();
 8000dce:	f000 f837 	bl	8000e40 <track_play>
			break;
 8000dd2:	e005      	b.n	8000de0 <state_handler+0x98>

		case record:
			record_track();
 8000dd4:	f000 f810 	bl	8000df8 <record_track>
			break;
 8000dd8:	e002      	b.n	8000de0 <state_handler+0x98>

		default:
			display_idle();
 8000dda:	f7ff fdd1 	bl	8000980 <display_idle>
			break;
 8000dde:	46c0      	nop			; (mov r8, r8)
	}
}
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b004      	add	sp, #16
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	200000a8 	.word	0x200000a8
 8000dec:	0800102c 	.word	0x0800102c
 8000df0:	000003e7 	.word	0x000003e7
 8000df4:	20000080 	.word	0x20000080

08000df8 <record_track>:

void record_track(void){
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
	ava = 0;
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <record_track+0x3c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
	enable_adc();
 8000e04:	f7ff fcb0 	bl	8000768 <enable_adc>
	for(int i = 0; i < second*5; i++ ){
 8000e08:	2300      	movs	r3, #0
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	e005      	b.n	8000e1a <record_track+0x22>
		//read and write the sample to EEPROM
		display_record(1);
 8000e0e:	2001      	movs	r0, #1
 8000e10:	f7ff fd16 	bl	8000840 <display_record>
	for(int i = 0; i < second*5; i++ ){
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3301      	adds	r3, #1
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a06      	ldr	r2, [pc, #24]	; (8000e38 <record_track+0x40>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	ddf5      	ble.n	8000e0e <record_track+0x16>
	}
	disable_adc();
 8000e22:	f7ff fcaf 	bl	8000784 <disable_adc>
	loop = idlee;
 8000e26:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <record_track+0x44>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	701a      	strb	r2, [r3, #0]
}
 8000e2c:	46c0      	nop			; (mov r8, r8)
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	b002      	add	sp, #8
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000080 	.word	0x20000080
 8000e38:	00001387 	.word	0x00001387
 8000e3c:	200000a8 	.word	0x200000a8

08000e40 <track_play>:

void track_play(void){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
	button == nop;
	//read from i2c
	//configure pwm duty cycle
	for(int i = 0; i < second*5; i++ ){
 8000e46:	2300      	movs	r3, #0
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	e014      	b.n	8000e76 <track_play+0x36>
		display_playback(1);
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f7ff fd47 	bl	80008e0 <display_playback>
		if(button == stop_pause){
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <track_play+0x4c>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	d10a      	bne.n	8000e70 <track_play+0x30>
			button = nop;
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <track_play+0x4c>)
 8000e5c:	2208      	movs	r2, #8
 8000e5e:	701a      	strb	r2, [r3, #0]
			while( button != stop_pause);
 8000e60:	46c0      	nop			; (mov r8, r8)
 8000e62:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <track_play+0x4c>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	d1fb      	bne.n	8000e62 <track_play+0x22>
			button = nop;
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <track_play+0x4c>)
 8000e6c:	2208      	movs	r2, #8
 8000e6e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < second*5; i++ ){
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3301      	adds	r3, #1
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <track_play+0x50>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	dde6      	ble.n	8000e4c <track_play+0xc>
		}
	}
	loop = idlee;
 8000e7e:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <track_play+0x54>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	701a      	strb	r2, [r3, #0]
}
 8000e84:	46c0      	nop			; (mov r8, r8)
 8000e86:	46bd      	mov	sp, r7
 8000e88:	b002      	add	sp, #8
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	200000b0 	.word	0x200000b0
 8000e90:	00001387 	.word	0x00001387
 8000e94:	200000a8 	.word	0x200000a8

08000e98 <display_numb>:

void display_numb(int a){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	clear();
 8000ea0:	f000 f824 	bl	8000eec <clear>
	GPIOB->ODR |= numb[a];
 8000ea4:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <display_numb+0x48>)
 8000ea6:	6959      	ldr	r1, [r3, #20]
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <display_numb+0x4c>)
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	0092      	lsls	r2, r2, #2
 8000eae:	58d2      	ldr	r2, [r2, r3]
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <display_numb+0x48>)
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= digit[3];
 8000eb6:	23a0      	movs	r3, #160	; 0xa0
 8000eb8:	05db      	lsls	r3, r3, #23
 8000eba:	6959      	ldr	r1, [r3, #20]
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <display_numb+0x50>)
 8000ebe:	68da      	ldr	r2, [r3, #12]
 8000ec0:	23a0      	movs	r3, #160	; 0xa0
 8000ec2:	05db      	lsls	r3, r3, #23
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	615a      	str	r2, [r3, #20]
	delay(LEDDELAY);
 8000ec8:	23fa      	movs	r3, #250	; 0xfa
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f000 f821 	bl	8000f14 <delay>
	clear();
 8000ed2:	f000 f80b 	bl	8000eec <clear>
}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	b002      	add	sp, #8
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	50000400 	.word	0x50000400
 8000ee4:	20000010 	.word	0x20000010
 8000ee8:	20000000 	.word	0x20000000

08000eec <clear>:
	if( ((ADC1->ISR >> 2 ) & 1)){
	   	adc_val = ADC1->DR;
	}
}

void clear(void){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	GPIOA->ODR &= (3U << 6);
 8000ef0:	23a0      	movs	r3, #160	; 0xa0
 8000ef2:	05db      	lsls	r3, r3, #23
 8000ef4:	695a      	ldr	r2, [r3, #20]
 8000ef6:	23a0      	movs	r3, #160	; 0xa0
 8000ef8:	05db      	lsls	r3, r3, #23
 8000efa:	21c0      	movs	r1, #192	; 0xc0
 8000efc:	400a      	ands	r2, r1
 8000efe:	615a      	str	r2, [r3, #20]
	GPIOB->ODR &= 0U;
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <clear+0x24>)
 8000f02:	695b      	ldr	r3, [r3, #20]
 8000f04:	4b02      	ldr	r3, [pc, #8]	; (8000f10 <clear+0x24>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	615a      	str	r2, [r3, #20]
}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	50000400 	.word	0x50000400

08000f14 <delay>:

//delay
void delay(volatile uint32_t s) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
    for(; s>0; s--);
 8000f1c:	e002      	b.n	8000f24 <delay+0x10>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	3b01      	subs	r3, #1
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d1f9      	bne.n	8000f1e <delay+0xa>
}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	b002      	add	sp, #8
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <main>:
 */

#include "stm32g0xx.h"
#include "bsp_lib.h"

int main(void) {
 8000f32:	b580      	push	{r7, lr}
 8000f34:	af00      	add	r7, sp, #0

	BSP_System_Init();
 8000f36:	f7ff f9f9 	bl	800032c <BSP_System_Init>

    /* Setup PC6 as output */


    while(1) {
    	state_handler();
 8000f3a:	f7ff ff05 	bl	8000d48 <state_handler>
 8000f3e:	e7fc      	b.n	8000f3a <main+0x8>

08000f40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f40:	480d      	ldr	r0, [pc, #52]	; (8000f78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f42:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f44:	f000 f826 	bl	8000f94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f48:	480c      	ldr	r0, [pc, #48]	; (8000f7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f4a:	490d      	ldr	r1, [pc, #52]	; (8000f80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	; (8000f84 <LoopForever+0xe>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f50:	e002      	b.n	8000f58 <LoopCopyDataInit>

08000f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f56:	3304      	adds	r3, #4

08000f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f5c:	d3f9      	bcc.n	8000f52 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f60:	4c0a      	ldr	r4, [pc, #40]	; (8000f8c <LoopForever+0x16>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f64:	e001      	b.n	8000f6a <LoopFillZerobss>

08000f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f68:	3204      	adds	r2, #4

08000f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f6c:	d3fb      	bcc.n	8000f66 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f6e:	f000 f81d 	bl	8000fac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f72:	f7ff ffde 	bl	8000f32 <main>

08000f76 <LoopForever>:

LoopForever:
    b LoopForever
 8000f76:	e7fe      	b.n	8000f76 <LoopForever>
  ldr   r0, =_estack
 8000f78:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f80:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000f84:	08001050 	.word	0x08001050
  ldr r2, =_sbss
 8000f88:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000f8c:	200000c4 	.word	0x200000c4

08000f90 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f90:	e7fe      	b.n	8000f90 <ADC_COMP_IRQHandler>
	...

08000f94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <SystemInit+0x14>)
 8000f9a:	2280      	movs	r2, #128	; 0x80
 8000f9c:	0512      	lsls	r2, r2, #20
 8000f9e:	609a      	str	r2, [r3, #8]
#endif
}
 8000fa0:	46c0      	nop			; (mov r8, r8)
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__libc_init_array>:
 8000fac:	b570      	push	{r4, r5, r6, lr}
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4d0c      	ldr	r5, [pc, #48]	; (8000fe4 <__libc_init_array+0x38>)
 8000fb2:	4c0d      	ldr	r4, [pc, #52]	; (8000fe8 <__libc_init_array+0x3c>)
 8000fb4:	1b64      	subs	r4, r4, r5
 8000fb6:	10a4      	asrs	r4, r4, #2
 8000fb8:	42a6      	cmp	r6, r4
 8000fba:	d109      	bne.n	8000fd0 <__libc_init_array+0x24>
 8000fbc:	2600      	movs	r6, #0
 8000fbe:	f000 f819 	bl	8000ff4 <_init>
 8000fc2:	4d0a      	ldr	r5, [pc, #40]	; (8000fec <__libc_init_array+0x40>)
 8000fc4:	4c0a      	ldr	r4, [pc, #40]	; (8000ff0 <__libc_init_array+0x44>)
 8000fc6:	1b64      	subs	r4, r4, r5
 8000fc8:	10a4      	asrs	r4, r4, #2
 8000fca:	42a6      	cmp	r6, r4
 8000fcc:	d105      	bne.n	8000fda <__libc_init_array+0x2e>
 8000fce:	bd70      	pop	{r4, r5, r6, pc}
 8000fd0:	00b3      	lsls	r3, r6, #2
 8000fd2:	58eb      	ldr	r3, [r5, r3]
 8000fd4:	4798      	blx	r3
 8000fd6:	3601      	adds	r6, #1
 8000fd8:	e7ee      	b.n	8000fb8 <__libc_init_array+0xc>
 8000fda:	00b3      	lsls	r3, r6, #2
 8000fdc:	58eb      	ldr	r3, [r5, r3]
 8000fde:	4798      	blx	r3
 8000fe0:	3601      	adds	r6, #1
 8000fe2:	e7f2      	b.n	8000fca <__libc_init_array+0x1e>
 8000fe4:	08001048 	.word	0x08001048
 8000fe8:	08001048 	.word	0x08001048
 8000fec:	08001048 	.word	0x08001048
 8000ff0:	0800104c 	.word	0x0800104c

08000ff4 <_init>:
 8000ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ffa:	bc08      	pop	{r3}
 8000ffc:	469e      	mov	lr, r3
 8000ffe:	4770      	bx	lr

08001000 <_fini>:
 8001000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001006:	bc08      	pop	{r3}
 8001008:	469e      	mov	lr, r3
 800100a:	4770      	bx	lr
